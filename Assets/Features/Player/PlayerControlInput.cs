//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/Features/Player/PlayerControlInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

namespace Features.Player
{
    public partial class @PlayerControlInput : IInputActionCollection2, IDisposable
    {
        public InputActionAsset asset { get; }
        public @PlayerControlInput()
        {
            asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerControlInput"",
    ""maps"": [
        {
            ""name"": ""BasicLocomotion"",
            ""id"": ""386a3501-64fe-4efd-97a9-55dbec2282ab"",
            ""actions"": [
                {
                    ""name"": ""Movement"",
                    ""type"": ""Value"",
                    ""id"": ""9066d1cb-ae35-4d68-8086-88c101bef919"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Sprint"",
                    ""type"": ""Button"",
                    ""id"": ""e15cf132-a0d3-487b-900f-a1567bc58398"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""b62ff0f3-cf45-4868-a860-685ce17d086b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Dodge"",
                    ""type"": ""Button"",
                    ""id"": ""8d692379-7846-4cf0-8bb1-e19e5147eccf"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Crouch"",
                    ""type"": ""Button"",
                    ""id"": ""8faa8d02-86ed-4b36-a56f-44474db38acb"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Drop"",
                    ""type"": ""Button"",
                    ""id"": ""21f2adde-dbf2-4c66-862f-919cceeb479b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""WASD"",
                    ""id"": ""2baf3fda-2a21-4a60-ab12-257dffee5998"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""dc469418-f18d-4aa6-bd2b-8e1ce1fd3ac7"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""c35c48f5-dc94-4e2f-8f7c-20ba5a2bcf48"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""18fe3596-bc92-488d-80c9-33133c72d237"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""2e40ff34-31a8-44a1-b7fa-240ccae1331c"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""5d1bf590-ffbc-4426-abea-ec2fcdbb3729"",
                    ""path"": ""<Keyboard>/leftShift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Sprint"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""deffc23b-a54f-4c8f-b326-a46d36f4bd27"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c8ad1a27-b498-4f4d-b5d5-1cebf1b786f2"",
                    ""path"": ""<Keyboard>/leftAlt"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Dodge"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7818d271-0c08-46b4-991b-2e0fc112881f"",
                    ""path"": ""<Keyboard>/c"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Crouch"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""caf836a4-555b-4b5a-906d-a3583b3757ea"",
                    ""path"": ""<Keyboard>/leftAlt"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Drop"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Climbing"",
            ""id"": ""aae869ca-9068-4f21-9f63-ee6d9326317a"",
            ""actions"": [
                {
                    ""name"": ""New action"",
                    ""type"": ""Button"",
                    ""id"": ""f916bab6-d467-4d12-a5d3-d5be59c0b0ee"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""3d2751bf-4d59-4504-84f2-ebc170c8ed30"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""New action"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Swimming"",
            ""id"": ""1a9b5302-666c-42ad-8a38-819a162f35d6"",
            ""actions"": [
                {
                    ""name"": ""New action"",
                    ""type"": ""Button"",
                    ""id"": ""4b56cad2-c01c-4d89-9cf9-a5d2e5862377"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""a47d7c6b-f671-4917-84a0-ad4ea5b7d582"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""New action"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Camera"",
            ""id"": ""3e2ec3ba-3695-4adc-9cdd-d83a5777d33f"",
            ""actions"": [
                {
                    ""name"": ""Look"",
                    ""type"": ""PassThrough"",
                    ""id"": ""a4c006e5-6ff5-4d6a-9160-3165e4e556ec"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ShoulderSwitch"",
                    ""type"": ""Button"",
                    ""id"": ""22a5b67b-1eef-473a-8fd9-e93386c0836c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Aim"",
                    ""type"": ""Button"",
                    ""id"": ""9e359bee-0f1a-42b3-9871-7a348b793535"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""c206c568-1acb-4ccf-a961-e2b83c89d8a7"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Look"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""aa0412b0-e46a-4149-b9a9-2bc26c0273d5"",
                    ""path"": ""<Keyboard>/v"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ShoulderSwitch"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f09ef6a9-8ebe-4418-9afa-32629d17c45d"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Aim"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Combat"",
            ""id"": ""5bdfa785-3801-403b-af87-db1df9eb4f5f"",
            ""actions"": [
                {
                    ""name"": ""Attack"",
                    ""type"": ""Button"",
                    ""id"": ""bdea9374-d176-4d62-9f30-1b011a5ae456"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""af8d0558-0f12-4d82-aa96-07061cd3ae27"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Attack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Other"",
            ""id"": ""452fb283-42d6-4943-8247-09623dfbf573"",
            ""actions"": [
                {
                    ""name"": ""Interact"",
                    ""type"": ""Button"",
                    ""id"": ""1bdb68dd-e219-46d1-84a0-53121b17425c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Heal"",
                    ""type"": ""Button"",
                    ""id"": ""debc27eb-78af-4ee2-86ae-d5e53fdefab0"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""7211445a-881b-46f9-a0c9-eb38a1d4bfa1"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Interact"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""cedae07e-b8ed-4b4a-947d-672371e5e90c"",
                    ""path"": ""<Keyboard>/1"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Heal"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
            // BasicLocomotion
            m_BasicLocomotion = asset.FindActionMap("BasicLocomotion", throwIfNotFound: true);
            m_BasicLocomotion_Movement = m_BasicLocomotion.FindAction("Movement", throwIfNotFound: true);
            m_BasicLocomotion_Sprint = m_BasicLocomotion.FindAction("Sprint", throwIfNotFound: true);
            m_BasicLocomotion_Jump = m_BasicLocomotion.FindAction("Jump", throwIfNotFound: true);
            m_BasicLocomotion_Dodge = m_BasicLocomotion.FindAction("Dodge", throwIfNotFound: true);
            m_BasicLocomotion_Crouch = m_BasicLocomotion.FindAction("Crouch", throwIfNotFound: true);
            m_BasicLocomotion_Drop = m_BasicLocomotion.FindAction("Drop", throwIfNotFound: true);
            // Climbing
            m_Climbing = asset.FindActionMap("Climbing", throwIfNotFound: true);
            m_Climbing_Newaction = m_Climbing.FindAction("New action", throwIfNotFound: true);
            // Swimming
            m_Swimming = asset.FindActionMap("Swimming", throwIfNotFound: true);
            m_Swimming_Newaction = m_Swimming.FindAction("New action", throwIfNotFound: true);
            // Camera
            m_Camera = asset.FindActionMap("Camera", throwIfNotFound: true);
            m_Camera_Look = m_Camera.FindAction("Look", throwIfNotFound: true);
            m_Camera_ShoulderSwitch = m_Camera.FindAction("ShoulderSwitch", throwIfNotFound: true);
            m_Camera_Aim = m_Camera.FindAction("Aim", throwIfNotFound: true);
            // Combat
            m_Combat = asset.FindActionMap("Combat", throwIfNotFound: true);
            m_Combat_Attack = m_Combat.FindAction("Attack", throwIfNotFound: true);
            // Other
            m_Other = asset.FindActionMap("Other", throwIfNotFound: true);
            m_Other_Interact = m_Other.FindAction("Interact", throwIfNotFound: true);
            m_Other_Heal = m_Other.FindAction("Heal", throwIfNotFound: true);
        }

        public void Dispose()
        {
            UnityEngine.Object.Destroy(asset);
        }

        public InputBinding? bindingMask
        {
            get => asset.bindingMask;
            set => asset.bindingMask = value;
        }

        public ReadOnlyArray<InputDevice>? devices
        {
            get => asset.devices;
            set => asset.devices = value;
        }

        public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

        public bool Contains(InputAction action)
        {
            return asset.Contains(action);
        }

        public IEnumerator<InputAction> GetEnumerator()
        {
            return asset.GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        public void Enable()
        {
            asset.Enable();
        }

        public void Disable()
        {
            asset.Disable();
        }
        public IEnumerable<InputBinding> bindings => asset.bindings;

        public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
        {
            return asset.FindAction(actionNameOrId, throwIfNotFound);
        }
        public int FindBinding(InputBinding bindingMask, out InputAction action)
        {
            return asset.FindBinding(bindingMask, out action);
        }

        // BasicLocomotion
        private readonly InputActionMap m_BasicLocomotion;
        private IBasicLocomotionActions m_BasicLocomotionActionsCallbackInterface;
        private readonly InputAction m_BasicLocomotion_Movement;
        private readonly InputAction m_BasicLocomotion_Sprint;
        private readonly InputAction m_BasicLocomotion_Jump;
        private readonly InputAction m_BasicLocomotion_Dodge;
        private readonly InputAction m_BasicLocomotion_Crouch;
        private readonly InputAction m_BasicLocomotion_Drop;
        public struct BasicLocomotionActions
        {
            private @PlayerControlInput m_Wrapper;
            public BasicLocomotionActions(@PlayerControlInput wrapper) { m_Wrapper = wrapper; }
            public InputAction @Movement => m_Wrapper.m_BasicLocomotion_Movement;
            public InputAction @Sprint => m_Wrapper.m_BasicLocomotion_Sprint;
            public InputAction @Jump => m_Wrapper.m_BasicLocomotion_Jump;
            public InputAction @Dodge => m_Wrapper.m_BasicLocomotion_Dodge;
            public InputAction @Crouch => m_Wrapper.m_BasicLocomotion_Crouch;
            public InputAction @Drop => m_Wrapper.m_BasicLocomotion_Drop;
            public InputActionMap Get() { return m_Wrapper.m_BasicLocomotion; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(BasicLocomotionActions set) { return set.Get(); }
            public void SetCallbacks(IBasicLocomotionActions instance)
            {
                if (m_Wrapper.m_BasicLocomotionActionsCallbackInterface != null)
                {
                    @Movement.started -= m_Wrapper.m_BasicLocomotionActionsCallbackInterface.OnMovement;
                    @Movement.performed -= m_Wrapper.m_BasicLocomotionActionsCallbackInterface.OnMovement;
                    @Movement.canceled -= m_Wrapper.m_BasicLocomotionActionsCallbackInterface.OnMovement;
                    @Sprint.started -= m_Wrapper.m_BasicLocomotionActionsCallbackInterface.OnSprint;
                    @Sprint.performed -= m_Wrapper.m_BasicLocomotionActionsCallbackInterface.OnSprint;
                    @Sprint.canceled -= m_Wrapper.m_BasicLocomotionActionsCallbackInterface.OnSprint;
                    @Jump.started -= m_Wrapper.m_BasicLocomotionActionsCallbackInterface.OnJump;
                    @Jump.performed -= m_Wrapper.m_BasicLocomotionActionsCallbackInterface.OnJump;
                    @Jump.canceled -= m_Wrapper.m_BasicLocomotionActionsCallbackInterface.OnJump;
                    @Dodge.started -= m_Wrapper.m_BasicLocomotionActionsCallbackInterface.OnDodge;
                    @Dodge.performed -= m_Wrapper.m_BasicLocomotionActionsCallbackInterface.OnDodge;
                    @Dodge.canceled -= m_Wrapper.m_BasicLocomotionActionsCallbackInterface.OnDodge;
                    @Crouch.started -= m_Wrapper.m_BasicLocomotionActionsCallbackInterface.OnCrouch;
                    @Crouch.performed -= m_Wrapper.m_BasicLocomotionActionsCallbackInterface.OnCrouch;
                    @Crouch.canceled -= m_Wrapper.m_BasicLocomotionActionsCallbackInterface.OnCrouch;
                    @Drop.started -= m_Wrapper.m_BasicLocomotionActionsCallbackInterface.OnDrop;
                    @Drop.performed -= m_Wrapper.m_BasicLocomotionActionsCallbackInterface.OnDrop;
                    @Drop.canceled -= m_Wrapper.m_BasicLocomotionActionsCallbackInterface.OnDrop;
                }
                m_Wrapper.m_BasicLocomotionActionsCallbackInterface = instance;
                if (instance != null)
                {
                    @Movement.started += instance.OnMovement;
                    @Movement.performed += instance.OnMovement;
                    @Movement.canceled += instance.OnMovement;
                    @Sprint.started += instance.OnSprint;
                    @Sprint.performed += instance.OnSprint;
                    @Sprint.canceled += instance.OnSprint;
                    @Jump.started += instance.OnJump;
                    @Jump.performed += instance.OnJump;
                    @Jump.canceled += instance.OnJump;
                    @Dodge.started += instance.OnDodge;
                    @Dodge.performed += instance.OnDodge;
                    @Dodge.canceled += instance.OnDodge;
                    @Crouch.started += instance.OnCrouch;
                    @Crouch.performed += instance.OnCrouch;
                    @Crouch.canceled += instance.OnCrouch;
                    @Drop.started += instance.OnDrop;
                    @Drop.performed += instance.OnDrop;
                    @Drop.canceled += instance.OnDrop;
                }
            }
        }
        public BasicLocomotionActions @BasicLocomotion => new BasicLocomotionActions(this);

        // Climbing
        private readonly InputActionMap m_Climbing;
        private IClimbingActions m_ClimbingActionsCallbackInterface;
        private readonly InputAction m_Climbing_Newaction;
        public struct ClimbingActions
        {
            private @PlayerControlInput m_Wrapper;
            public ClimbingActions(@PlayerControlInput wrapper) { m_Wrapper = wrapper; }
            public InputAction @Newaction => m_Wrapper.m_Climbing_Newaction;
            public InputActionMap Get() { return m_Wrapper.m_Climbing; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(ClimbingActions set) { return set.Get(); }
            public void SetCallbacks(IClimbingActions instance)
            {
                if (m_Wrapper.m_ClimbingActionsCallbackInterface != null)
                {
                    @Newaction.started -= m_Wrapper.m_ClimbingActionsCallbackInterface.OnNewaction;
                    @Newaction.performed -= m_Wrapper.m_ClimbingActionsCallbackInterface.OnNewaction;
                    @Newaction.canceled -= m_Wrapper.m_ClimbingActionsCallbackInterface.OnNewaction;
                }
                m_Wrapper.m_ClimbingActionsCallbackInterface = instance;
                if (instance != null)
                {
                    @Newaction.started += instance.OnNewaction;
                    @Newaction.performed += instance.OnNewaction;
                    @Newaction.canceled += instance.OnNewaction;
                }
            }
        }
        public ClimbingActions @Climbing => new ClimbingActions(this);

        // Swimming
        private readonly InputActionMap m_Swimming;
        private ISwimmingActions m_SwimmingActionsCallbackInterface;
        private readonly InputAction m_Swimming_Newaction;
        public struct SwimmingActions
        {
            private @PlayerControlInput m_Wrapper;
            public SwimmingActions(@PlayerControlInput wrapper) { m_Wrapper = wrapper; }
            public InputAction @Newaction => m_Wrapper.m_Swimming_Newaction;
            public InputActionMap Get() { return m_Wrapper.m_Swimming; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(SwimmingActions set) { return set.Get(); }
            public void SetCallbacks(ISwimmingActions instance)
            {
                if (m_Wrapper.m_SwimmingActionsCallbackInterface != null)
                {
                    @Newaction.started -= m_Wrapper.m_SwimmingActionsCallbackInterface.OnNewaction;
                    @Newaction.performed -= m_Wrapper.m_SwimmingActionsCallbackInterface.OnNewaction;
                    @Newaction.canceled -= m_Wrapper.m_SwimmingActionsCallbackInterface.OnNewaction;
                }
                m_Wrapper.m_SwimmingActionsCallbackInterface = instance;
                if (instance != null)
                {
                    @Newaction.started += instance.OnNewaction;
                    @Newaction.performed += instance.OnNewaction;
                    @Newaction.canceled += instance.OnNewaction;
                }
            }
        }
        public SwimmingActions @Swimming => new SwimmingActions(this);

        // Camera
        private readonly InputActionMap m_Camera;
        private ICameraActions m_CameraActionsCallbackInterface;
        private readonly InputAction m_Camera_Look;
        private readonly InputAction m_Camera_ShoulderSwitch;
        private readonly InputAction m_Camera_Aim;
        public struct CameraActions
        {
            private @PlayerControlInput m_Wrapper;
            public CameraActions(@PlayerControlInput wrapper) { m_Wrapper = wrapper; }
            public InputAction @Look => m_Wrapper.m_Camera_Look;
            public InputAction @ShoulderSwitch => m_Wrapper.m_Camera_ShoulderSwitch;
            public InputAction @Aim => m_Wrapper.m_Camera_Aim;
            public InputActionMap Get() { return m_Wrapper.m_Camera; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(CameraActions set) { return set.Get(); }
            public void SetCallbacks(ICameraActions instance)
            {
                if (m_Wrapper.m_CameraActionsCallbackInterface != null)
                {
                    @Look.started -= m_Wrapper.m_CameraActionsCallbackInterface.OnLook;
                    @Look.performed -= m_Wrapper.m_CameraActionsCallbackInterface.OnLook;
                    @Look.canceled -= m_Wrapper.m_CameraActionsCallbackInterface.OnLook;
                    @ShoulderSwitch.started -= m_Wrapper.m_CameraActionsCallbackInterface.OnShoulderSwitch;
                    @ShoulderSwitch.performed -= m_Wrapper.m_CameraActionsCallbackInterface.OnShoulderSwitch;
                    @ShoulderSwitch.canceled -= m_Wrapper.m_CameraActionsCallbackInterface.OnShoulderSwitch;
                    @Aim.started -= m_Wrapper.m_CameraActionsCallbackInterface.OnAim;
                    @Aim.performed -= m_Wrapper.m_CameraActionsCallbackInterface.OnAim;
                    @Aim.canceled -= m_Wrapper.m_CameraActionsCallbackInterface.OnAim;
                }
                m_Wrapper.m_CameraActionsCallbackInterface = instance;
                if (instance != null)
                {
                    @Look.started += instance.OnLook;
                    @Look.performed += instance.OnLook;
                    @Look.canceled += instance.OnLook;
                    @ShoulderSwitch.started += instance.OnShoulderSwitch;
                    @ShoulderSwitch.performed += instance.OnShoulderSwitch;
                    @ShoulderSwitch.canceled += instance.OnShoulderSwitch;
                    @Aim.started += instance.OnAim;
                    @Aim.performed += instance.OnAim;
                    @Aim.canceled += instance.OnAim;
                }
            }
        }
        public CameraActions @Camera => new CameraActions(this);

        // Combat
        private readonly InputActionMap m_Combat;
        private ICombatActions m_CombatActionsCallbackInterface;
        private readonly InputAction m_Combat_Attack;
        public struct CombatActions
        {
            private @PlayerControlInput m_Wrapper;
            public CombatActions(@PlayerControlInput wrapper) { m_Wrapper = wrapper; }
            public InputAction @Attack => m_Wrapper.m_Combat_Attack;
            public InputActionMap Get() { return m_Wrapper.m_Combat; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(CombatActions set) { return set.Get(); }
            public void SetCallbacks(ICombatActions instance)
            {
                if (m_Wrapper.m_CombatActionsCallbackInterface != null)
                {
                    @Attack.started -= m_Wrapper.m_CombatActionsCallbackInterface.OnAttack;
                    @Attack.performed -= m_Wrapper.m_CombatActionsCallbackInterface.OnAttack;
                    @Attack.canceled -= m_Wrapper.m_CombatActionsCallbackInterface.OnAttack;
                }
                m_Wrapper.m_CombatActionsCallbackInterface = instance;
                if (instance != null)
                {
                    @Attack.started += instance.OnAttack;
                    @Attack.performed += instance.OnAttack;
                    @Attack.canceled += instance.OnAttack;
                }
            }
        }
        public CombatActions @Combat => new CombatActions(this);

        // Other
        private readonly InputActionMap m_Other;
        private IOtherActions m_OtherActionsCallbackInterface;
        private readonly InputAction m_Other_Interact;
        private readonly InputAction m_Other_Heal;
        public struct OtherActions
        {
            private @PlayerControlInput m_Wrapper;
            public OtherActions(@PlayerControlInput wrapper) { m_Wrapper = wrapper; }
            public InputAction @Interact => m_Wrapper.m_Other_Interact;
            public InputAction @Heal => m_Wrapper.m_Other_Heal;
            public InputActionMap Get() { return m_Wrapper.m_Other; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(OtherActions set) { return set.Get(); }
            public void SetCallbacks(IOtherActions instance)
            {
                if (m_Wrapper.m_OtherActionsCallbackInterface != null)
                {
                    @Interact.started -= m_Wrapper.m_OtherActionsCallbackInterface.OnInteract;
                    @Interact.performed -= m_Wrapper.m_OtherActionsCallbackInterface.OnInteract;
                    @Interact.canceled -= m_Wrapper.m_OtherActionsCallbackInterface.OnInteract;
                    @Heal.started -= m_Wrapper.m_OtherActionsCallbackInterface.OnHeal;
                    @Heal.performed -= m_Wrapper.m_OtherActionsCallbackInterface.OnHeal;
                    @Heal.canceled -= m_Wrapper.m_OtherActionsCallbackInterface.OnHeal;
                }
                m_Wrapper.m_OtherActionsCallbackInterface = instance;
                if (instance != null)
                {
                    @Interact.started += instance.OnInteract;
                    @Interact.performed += instance.OnInteract;
                    @Interact.canceled += instance.OnInteract;
                    @Heal.started += instance.OnHeal;
                    @Heal.performed += instance.OnHeal;
                    @Heal.canceled += instance.OnHeal;
                }
            }
        }
        public OtherActions @Other => new OtherActions(this);
        public interface IBasicLocomotionActions
        {
            void OnMovement(InputAction.CallbackContext context);
            void OnSprint(InputAction.CallbackContext context);
            void OnJump(InputAction.CallbackContext context);
            void OnDodge(InputAction.CallbackContext context);
            void OnCrouch(InputAction.CallbackContext context);
            void OnDrop(InputAction.CallbackContext context);
        }
        public interface IClimbingActions
        {
            void OnNewaction(InputAction.CallbackContext context);
        }
        public interface ISwimmingActions
        {
            void OnNewaction(InputAction.CallbackContext context);
        }
        public interface ICameraActions
        {
            void OnLook(InputAction.CallbackContext context);
            void OnShoulderSwitch(InputAction.CallbackContext context);
            void OnAim(InputAction.CallbackContext context);
        }
        public interface ICombatActions
        {
            void OnAttack(InputAction.CallbackContext context);
        }
        public interface IOtherActions
        {
            void OnInteract(InputAction.CallbackContext context);
            void OnHeal(InputAction.CallbackContext context);
        }
    }
}
